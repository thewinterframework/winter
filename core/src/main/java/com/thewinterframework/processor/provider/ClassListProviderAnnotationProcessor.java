package com.thewinterframework.processor.provider;

import com.thewinterframework.processor.AbstractWinterAnnotationProcessor;
import com.thewinterframework.utils.Tuple;

import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import java.lang.annotation.Annotation;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Annotation processor for class list providers.
 */
public abstract class ClassListProviderAnnotationProcessor extends AbstractWinterAnnotationProcessor {

	private final static String AUTO_GENERATED_TEMPLATE = "generated/AutoGeneratedClassListProviderTemplate.java";

	@Override
	protected boolean process(Element pluginClass, Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
		for (final var annotation : annotations) {
			final var scannedClasses = roundEnv.getElementsAnnotatedWith(annotation).stream()
					.filter(this::isClass)
					.filter(this::filterClass)
					.map(this::asClassString)
					.collect(Collectors.joining(", "));

			final var variables = List.of(
					Tuple.of("<PACKAGE_NAME>", getPluginPackage() + AutoGeneratedClassListProvider.AUTO_GENERATED_CLASS_LIST_PROVIDER_PACKAGE_PREFIX),
					Tuple.of("<CLASS_NAME>", annotation.getSimpleName().toString() + "ClassListProvider"),
					Tuple.of("<SCANNED_CLASSES>", scannedClasses)
			);

			copyTemplate(
					AUTO_GENERATED_TEMPLATE,
					getPluginPackage() + AutoGeneratedClassListProvider.AUTO_GENERATED_CLASS_LIST_PROVIDER_PACKAGE_PREFIX + "." + annotation.getSimpleName() + AutoGeneratedClassListProvider.AUTO_GENERATED_CLASS_LIST_PROVIDER_PREFIX,
					(reader, writer) -> pathReader(reader, variables).forEach(writer::println)
			);
		}

		return true;
	}

	public static AutoGeneratedClassListProvider scan(Class<?> plugin, Class<? extends Annotation> annotation) throws InvocationTargetException, InstantiationException, IllegalAccessException {
		return AutoGeneratedClassListProvider.scan(plugin, annotation);
	}

	// Override this handle to filter classes
	/**
	 * Filters the class.
	 *
	 * @param element the element to filter.
	 * @return true if the class should be included, false otherwise.
	 */
	protected boolean filterClass(Element element) {
		return true;
	}
}
