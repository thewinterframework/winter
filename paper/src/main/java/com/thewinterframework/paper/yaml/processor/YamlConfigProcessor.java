package com.thewinterframework.paper.yaml.processor;

import com.thewinterframework.paper.yaml.FileName;
import com.thewinterframework.processor.provider.FieldAnnotationProcessor;
import org.jetbrains.annotations.Nullable;

import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.VariableElement;
import java.lang.annotation.Annotation;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * A processor that generates a module for YAML configuration files.
 */
public class YamlConfigProcessor extends FieldAnnotationProcessor {

	public static final Pattern ELEMENT_PATTERN = Pattern.compile("(?:<el>)([\\s\\S]*)(?:<\\/el>)");

	@Override
	protected Set<Class<? extends Annotation>> getSupportedAnnotations() {
		return Set.of(FileName.class);
	}

	@Override
	protected @Nullable String requiredCanonicalModuleName() {
		return getModulePackage() + ".YamlConfigModule";
	}

	@Override
	protected void processFields(Element pluginClass, Set<VariableElement> fields, RoundEnvironment roundEnv) {
		copyTemplate("generated/AutoGeneratedYamlConfigModule.java", getModulePackage() + "." + "YamlConfigModule", (reader, writer) -> {
			final var content = reader.lines()
					.collect(Collectors.joining(System.lineSeparator()));

			final var matcher = ELEMENT_PATTERN.matcher(
					replaceVariables(content, commonVariables())
			);

			final var alreadyWritten = new HashSet<String>();

			final var buffer = new StringBuffer();
			while (matcher.find()) {
				final var builder = new StringBuilder();
				for (final var element : fields) {
					final var annotation = element.getAnnotation(FileName.class);
					if (annotation == null) {
						continue;
					}

					final var fileName = annotation.value();
					if (alreadyWritten.contains(fileName)) {
						continue;
					}

					builder.append(
							replaceVariables(
									matcher.group(1),
									TemplateVar.create("FILE_NAME", fileName),
									TemplateVar.create("NAME", element.getSimpleName().toString())
							)
					).append(System.lineSeparator());

					alreadyWritten.add(fileName);
				}

				matcher.appendReplacement(buffer, builder.toString());
			}

			matcher.appendTail(buffer);
			writer.println(buffer);
		});
	}

	private TemplateVar[] commonVariables() {
		return new TemplateVar[] {
				TemplateVar.create("PACKAGE_NAME", getModulePackage()),
				TemplateVar.create("CLASS_NAME", "YamlConfigModule"),
		};
	}

	public String getModulePackage() {
		return getPluginPackage() + ".autogenerated_winter_config_module";
	}

	protected String replaceVariables(String line, TemplateVar... variables) {
		for (var variable : variables) {
			line = line.replace(variable.variable(), variable.value().toString());
		}

		return line;
	}

	public record TemplateVar(
			String variable,
			Object value
	) {

		public static TemplateVar create(String variable, Object value) {
			return new TemplateVar("<" + variable + ">", value);
		}

	}
}
